# .github/workflows/mirror-to-public.yml
name: Mirror Private develop → Public main (with verification)

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      run_from_sha:
        description: 'Optional: SHA to mirror (defaults to latest on develop)'
        required: false
        default: ''

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout private repo @ develop
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          ref: develop

      - name: (Optional) Checkout specific SHA
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_from_sha != '' }}
        run: |
          git checkout ${{ github.event.inputs.run_from_sha }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Build filtered tree (exclude sensitive/private files)
        run: |
          set -e
          mkdir -p /tmp/public
          rsync -a --delete \
            --exclude 'config/config.php' \
            --exclude 'secure-config/' \
            --exclude 'php/secrets.php' \
            --exclude 'php/mail_config.php' \
            --exclude '.env' \
            --exclude '.env.*' \
            --exclude '.user.ini' \
            --exclude 'sql/' \
            --exclude '*.sql' \
            --exclude '*.bak' \
            --exclude '*.bak-*' \
            --exclude 'php/logs/*' \
            --exclude 'php/storage/*' \
            --exclude 'NSMG*.zip' \
            --exclude '*.zip' \
            --exclude 'vendor/' \
            --exclude 'node_modules/' \
            --exclude '.github/workflows/' \
            . /tmp/public/

          echo "== Contents of /tmp/public (first 200 lines) =="
          find /tmp/public -type f | sed 's#^/tmp/public/##' | sort | head -n 200

          cd /tmp/public
          git init
          git add -A

          # If nothing to commit, still create a commit to push as a mirror snapshot.
          if git diff --cached --quiet; then
            echo "No file changes staged; creating a timestamped snapshot commit anyway."
            date > .mirror_heartbeat
            git add .mirror_heartbeat
          fi

          SRC_SHA="$(git -C "$GITHUB_WORKSPACE" rev-parse --short=12 HEAD)"
          git commit -m "Mirror snapshot of ${GITHUB_REPOSITORY}@${SRC_SHA} (source: develop)"

          echo "== Local snapshot commit =="
          git log --oneline -1
          echo "== Tree summary =="
          git ls-files | wc -l

      - name: Push to public repo (private develop → public main)
        env:
          PUBLIC_REPO: warlikeloki/nsmg-review
          PUBLIC_PUSH_TOKEN: ${{ secrets.PUBLIC_PUSH_TOKEN }}
        run: |
          set -e
          cd /tmp/public
          git branch -M main
          git remote add public "https://x-access-token:${PUBLIC_PUSH_TOKEN}@github.com/${PUBLIC_REPO}.git"

          echo "== Verify remote auth and refs before push =="
          git ls-remote --heads public || (echo "Cannot list remote refs; check token/repo name" && exit 1)

          echo "== Push branch only (no tags to avoid workflow scope issues) =="
          git push -v public main --force

      - name: Verify public repo received the commit
        env:
          PUBLIC_REPO: warlikeloki/nsmg-review
          PUBLIC_PUSH_TOKEN: ${{ secrets.PUBLIC_PUSH_TOKEN }}
        run: |
          set -e
          cd /tmp/public
          LOCAL="$(git rev-parse HEAD)"
          echo "Local pushed commit: $LOCAL"

          echo "== Remote refs for public main =="
          REMOTE_LINE="$(git ls-remote --heads public refs/heads/main | awk '{print $1}')"
          echo "Remote public main: $REMOTE_LINE"

          if [ -z "$REMOTE_LINE" ]; then
            echo "ERROR: Could not read remote 'main'. Did the branch protection or token block the update?"
            exit 1
          fi

          if [ "$LOCAL" != "$REMOTE_LINE" ]; then
            echo "ERROR: Remote commit does not match local pushed commit."
            exit 1
          fi

          echo "✓ Verification passed: public main matches local snapshot."
